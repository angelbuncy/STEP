WEEK 8 PRACTICE PROBLEMS  -- ABSTRACTION
NATHALA ANGELINA SHARON 
RA2411003011689
Problem 1: Vehicle with Abstract Class
Problem Statement:
Create an abstract class Vehicle with an abstract method start(). Subclasses Car
and Bike will extend Vehicle and provide their own implementations for start().
Demonstrate abstraction by using Vehicle references to call the methods.
CODE:
// File: Vehicle.java
public abstract class Vehicle {
    public abstract void start();
    
    public void fuelType() {
        System.out.println("Uses fuel");
    }
}

// File: Car.java
public class Car extends Vehicle {
    @Override
    public void start() {
        System.out.println("Car starts with key");
    }
}

// File: Bike.java
public class Bike extends Vehicle {
    @Override
    public void start() {
        System.out.println("Bike starts with kick");
    }
}

// File: VehicleTest.java
public class VehicleTest {
    public static void main(String[] args) {
        Vehicle car = new Car();
        System.out.println("Car operations:");
        car.start();
        car.fuelType();
        
        System.out.println();
        
        Vehicle bike = new Bike();
        System.out.println("Bike operations:");
        bike.start();
        bike.fuelType();
    }
}

OUTPUT:
Car operations:
Car starts with key
Uses fuel

Bike operations:
Bike starts with kick
Uses fuel

Problem 2: Bank Account with Abstract Methods
Problem Statement:
Design an abstract class BankAccount with abstract method
calculateInterest(). Subclasses SavingsAccount and CurrentAccount
should implement it differently. Demonstrate abstraction by handling different account
types.
Understanding: Abstract class with both abstract and non-abstract methods.
CODE:
// File: BankAccount.java
public abstract class BankAccount {
    protected double balance;
    
    public BankAccount(double balance) {
        this.balance = balance;
    }
    
    public abstract void calculateInterest();
    
    public void displayBalance() {
        System.out.println("Balance: $" + balance);
    }
}

// File: SavingsAccount.java
public class SavingsAccount extends BankAccount {
    public SavingsAccount(double balance) {
        super(balance);
    }
    
    @Override
    public void calculateInterest() {
        double interest = balance * 0.04;
        System.out.println("Savings Account Interest (4%): $" + interest);
        balance += interest;
    }
}

// File: CurrentAccount.java
public class CurrentAccount extends BankAccount {
    public CurrentAccount(double balance) {
        super(balance);
    }
    
    @Override
    public void calculateInterest() {
        double interest = balance * 0.02;
        System.out.println("Current Account Interest (2%): $" + interest);
        balance += interest;
    }
}

// File: BankTest.java
public class BankTest {
    public static void main(String[] args) {
        BankAccount savings = new SavingsAccount(1000.0);
        System.out.println("Savings Account:");
        savings.displayBalance();
        savings.calculateInterest();
        savings.displayBalance();
        
        System.out.println();
        
        BankAccount current = new CurrentAccount(1500.0);
        System.out.println("Current Account:");
        current.displayBalance();
        current.calculateInterest();
        current.displayBalance();
    }
}

OUTPUT:
Savings Account:
Balance: $1000.0
Savings Account Interest (4%): $40.0
Balance: $1040.0

Current Account:
Balance: $1500.0
Current Account Interest (2%): $30.0
Balance: $1530.0

Problem 3: Interface for Payment Gateway
Problem Statement:
Create an interface PaymentGateway with methods pay() and refund().
Implement this interface in CreditCardPayment and UPIPayment. Demonstrate
multiple payment methods using interfaces.
Understanding: Interface implementation and abstraction through contracts.
CODE:
// File: PaymentGateway.java
public interface PaymentGateway {
    void pay(double amount);
    void refund(double amount);
}

// File: CreditCardPayment.java
public class CreditCardPayment implements PaymentGateway {
    @Override
    public void pay(double amount) {
        System.out.println("Paid $" + amount + " via Credit Card");
    }
    
    @Override
    public void refund(double amount) {
        System.out.println("Refund $" + amount + " to Credit Card");
    }
}

// File: UPIPayment.java
public class UPIPayment implements PaymentGateway {
    @Override
    public void pay(double amount) {
        System.out.println("Paid $" + amount + " via UPI");
    }
    
    @Override
    public void refund(double amount) {
        System.out.println("Refund $" + amount + " to UPI");
    }
}

// File: PaymentTest.java
public class PaymentTest {
    public static void main(String[] args) {
        PaymentGateway creditCard = new CreditCardPayment();
        System.out.println("Credit Card Payment:");
        creditCard.pay(250.50);
        creditCard.refund(50.25);
        
        System.out.println();
        
        PaymentGateway upi = new UPIPayment();
        System.out.println("UPI Payment:");
        upi.pay(175.75);
        upi.refund(25.00);
    }
}

OUTPUT:
Credit Card Payment:
Paid $250.5 via Credit Card
Refund $50.25 to Credit Card

UPI Payment:
Paid $175.75 via UPI
Refund $25.0 to UPI
